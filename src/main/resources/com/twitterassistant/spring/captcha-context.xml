<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
													 http://www.springframework.org/schema/util/spring-util-3.0.xsd">
	
	<!-- 
	 	Configuration: https://jcaptcha.atlassian.net/wiki/display/general/ImageCaptchaEngine+components+reference#ImageCaptchaEnginecomponentsreference-Listofcolors
	 	Samples: https://jcaptcha.atlassian.net/wiki/display/general/Samples+tests
	 -->
	
	<bean id="captchaService"
		class="com.octo.captcha.service.multitype.GenericManageableCaptchaService">
		<constructor-arg index="0" ref="imageEngine" />
		<constructor-arg type="int" index="1" value="180" /> <!-- minGuarantedStorageDelayInSeconds -->
		<constructor-arg type="int" index="2" value="180000" /> <!-- maxCaptchaStoreSize -->
		<constructor-arg type="int" index="3" value="75000" /> <!-- captchaStoreLoadBeforeGarbageCollection -->
	</bean>

	<bean id="imageEngine" class="com.octo.captcha.engine.GenericCaptchaEngine">
		<constructor-arg index="0">
			<list>
				<ref bean="CaptchaFactory" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="CaptchaFactory" class="com.octo.captcha.image.gimpy.GimpyFactory">
		<constructor-arg>
			<ref bean="wordgen" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="wordtoimage" />
		</constructor-arg>
	</bean>


	<!-- A WordGenerator creates a text to be read, it can be random, be a common 
		implementation take words from a list, and can make composition to create 
		a text easier to read for a human being. In the example the WordGenerator 
		needs a Dictionnary to get real words from. -->
	<bean id="wordgen"
		class="com.octo.captcha.component.word.wordgenerator.DictionaryWordGenerator">
		<constructor-arg>
			<ref bean="filedict" />
		</constructor-arg>
	</bean>

	<!-- A Dictionary provides words, this one reads words from the one provided 
		by default, with almost 6000 english words. -->
	<bean id="filedict" class="com.octo.captcha.component.word.FileDictionary">
		<constructor-arg index="0">
			<value>toddlist</value>
		</constructor-arg>
	</bean>

	<bean id="wordtoimage"
		class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage">
		<constructor-arg index="0">
			<ref bean="fontGenRandom" />
		</constructor-arg>
		<constructor-arg index="1">
			<ref bean="backGenUni" />
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="simpleWhitePaster" />
		</constructor-arg>
	</bean>

	<!-- A FontGenerator provide Fonts to a WordToImage, differents fonts increase 
		the difficulties for cracking software using a learning process. This one 
		generates random fonts from a list, and the first two arguments are the minimum 
		size and the maximum size of the font. -->
	<bean id="fontGenRandom"
		class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator">
		<constructor-arg index="0">
			<value>40</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>50</value>
		</constructor-arg>
		<constructor-arg index="2">
			<list>
				<ref bean="fontArial" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="fontArial" class="java.awt.Font">
		<constructor-arg index="0">
			<value>Arial</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>0</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>7</value>
		</constructor-arg>
	</bean>


	<!-- The BackgrountGenerator component can be very simple like in the example, 
		single color, or more complex with real picture, or fancy computed shapes. 
		The first two arguments are always, the size (length and height) of the resulting 
		image. -->
	<bean id="backGenUni"
		class="com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator">
		<constructor-arg index="0">
			<value>200</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>70</value>
		</constructor-arg>
	</bean>

	<!-- 1. Minimal length of the text 2. Maximal length of the text 3. A color 
		generator component to create the text color, see Annexes. -->
	<bean id="simpleWhitePaster"
		class="com.octo.captcha.component.image.textpaster.SimpleTextPaster">
		<constructor-arg type="java.lang.Integer" index="0">
			<value>7</value>
		</constructor-arg>
		<constructor-arg type="java.lang.Integer" index="1">
			<value>7</value>
		</constructor-arg>
		<constructor-arg type="java.awt.Color" index="2">
			<ref bean="fontColor" />
		</constructor-arg>
	</bean>

	<!-- this( (int) (r*255+0.5), (int) (g*255+0.5), (int) (b*255+0.5)); -->
	<bean id="fontColor" class="java.awt.Color">
		<constructor-arg index="0">
			<value>0.5</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>0</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>0</value>
		</constructor-arg>
	</bean>


</beans>
